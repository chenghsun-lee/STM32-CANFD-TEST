<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Flash\CanDemo_15.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Flash\CanDemo_15.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Jul 18 10:24:10 2019
<BR><P>
<H3>Maximum Stack Usage =        312 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; APP_Tasks &rArr; APP_TransmitSwitchState &rArr; APP_TransmitMessageQueue &rArr; DRV_CANFDSPI_TransmitChannelLoad &rArr; DRV_CANFDSPI_TransmitChannelUpdate &rArr; DRV_CANFDSPI_WriteByte &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[46]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[90]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[49]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[91]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[92]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[93]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[94]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[95]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TestRamAccess
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_PayLoad_Tasks
</UL>

<P><STRONG><a name="[96]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[97]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>APP_CANFDSPI_Init</STRONG> (Thumb, 328 bytes, Stack size 8 bytes, app.o(i.APP_CANFDSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = APP_CANFDSPI_Init &rArr; DRV_CANFDSPI_RamInit &rArr; DRV_CANFDSPI_WriteByteArray &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_TransmitChannelConfigureObjectReset
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_TransmitChannelConfigure
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_Reset
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_ReceiveChannelEventEnable
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_ReceiveChannelConfigureObjectReset
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_ReceiveChannelConfigure
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_RamInit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_OperationModeSelect
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_ModuleEventEnable
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_GpioModeConfigure
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_FilterToFifoLink
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_FilterObjectConfigure
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_FilterMaskConfigure
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_EccEnable
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_ConfigureObjectReset
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_Configure
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_BitTimeConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Tasks
</UL>

<P><STRONG><a name="[5e]"></a>APP_Initialize</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, app.o(i.APP_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = APP_Initialize &rArr; DRV_SPI_Initialize &rArr; spi_master_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_SPI_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>APP_LED_Clear</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app.o(i.APP_LED_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APP_LED_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TransmitMessageQueue
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ReceiveMessage_Tasks
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LED_Write
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Tasks
</UL>

<P><STRONG><a name="[64]"></a>APP_LED_Set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app.o(i.APP_LED_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APP_LED_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TransmitMessageQueue
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ReceiveMessage_Tasks
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LED_Write
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Tasks
</UL>

<P><STRONG><a name="[66]"></a>APP_LED_Write</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, app.o(i.APP_LED_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = APP_LED_Write &rArr; APP_LED_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LED_Set
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LED_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ReceiveMessage_Tasks
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Tasks
</UL>

<P><STRONG><a name="[67]"></a>APP_PayLoad_Tasks</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, app.o(i.APP_PayLoad_Tasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = APP_PayLoad_Tasks &rArr; APP_TransmitMessageQueue &rArr; DRV_CANFDSPI_TransmitChannelLoad &rArr; DRV_CANFDSPI_TransmitChannelUpdate &rArr; DRV_CANFDSPI_WriteByte &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_DlcToDataBytes
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TransmitMessageQueue
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Tasks
</UL>

<P><STRONG><a name="[6b]"></a>APP_ReceiveMessage_Tasks</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, app.o(i.APP_ReceiveMessage_Tasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = APP_ReceiveMessage_Tasks &rArr; APP_TransmitMessageQueue &rArr; DRV_CANFDSPI_TransmitChannelLoad &rArr; DRV_CANFDSPI_TransmitChannelUpdate &rArr; DRV_CANFDSPI_WriteByte &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_ReceiveMessageGet
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TransmitMessageQueue
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LED_Write
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LED_Set
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LED_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Tasks
</UL>

<P><STRONG><a name="[6e]"></a>APP_Tasks</STRONG> (Thumb, 392 bytes, Stack size 8 bytes, app.o(i.APP_Tasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = APP_Tasks &rArr; APP_TransmitSwitchState &rArr; APP_TransmitMessageQueue &rArr; DRV_CANFDSPI_TransmitChannelLoad &rArr; DRV_CANFDSPI_TransmitChannelUpdate &rArr; DRV_CANFDSPI_WriteByte &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TransmitSwitchState
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TestRamAccess
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ReceiveMessage_Tasks
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_PayLoad_Tasks
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LED_Write
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LED_Set
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LED_Clear
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_CANFDSPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>APP_TestRamAccess</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, app.o(i.APP_TestRamAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = APP_TestRamAccess &rArr; DRV_CANFDSPI_WriteByteArray &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_WriteByteArray
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_ReadByteArray
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Tasks
</UL>

<P><STRONG><a name="[6a]"></a>APP_TransmitMessageQueue</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, app.o(i.APP_TransmitMessageQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = APP_TransmitMessageQueue &rArr; DRV_CANFDSPI_TransmitChannelLoad &rArr; DRV_CANFDSPI_TransmitChannelUpdate &rArr; DRV_CANFDSPI_WriteByte &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_TransmitChannelLoad
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_TransmitChannelEventGet
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_ErrorCountStateGet
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_DlcToDataBytes
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LED_Set
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LED_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TransmitSwitchState
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ReceiveMessage_Tasks
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_PayLoad_Tasks
</UL>

<P><STRONG><a name="[6f]"></a>APP_TransmitSwitchState</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, app.o(i.APP_TransmitSwitchState))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = APP_TransmitSwitchState &rArr; APP_TransmitMessageQueue &rArr; DRV_CANFDSPI_TransmitChannelLoad &rArr; DRV_CANFDSPI_TransmitChannelUpdate &rArr; DRV_CANFDSPI_WriteByte &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TransmitMessageQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Tasks
</UL>

<P><STRONG><a name="[59]"></a>DRV_CANFDSPI_BitTimeConfigure</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_BitTimeConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DRV_CANFDSPI_BitTimeConfigure &rArr; DRV_CANFDSPI_BitTimeConfigureData40MHz &rArr; DRV_CANFDSPI_WriteWord &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_BitTimeConfigureNominal40MHz
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_BitTimeConfigureNominal20MHz
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_BitTimeConfigureNominal10MHz
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_BitTimeConfigureData40MHz
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_BitTimeConfigureData20MHz
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_BitTimeConfigureData10MHz
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_CANFDSPI_Init
</UL>

<P><STRONG><a name="[7b]"></a>DRV_CANFDSPI_BitTimeConfigureData10MHz</STRONG> (Thumb, 540 bytes, Stack size 32 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_BitTimeConfigureData10MHz))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DRV_CANFDSPI_BitTimeConfigureData10MHz &rArr; DRV_CANFDSPI_WriteWord &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_WriteWord
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_BitTimeConfigure
</UL>

<P><STRONG><a name="[79]"></a>DRV_CANFDSPI_BitTimeConfigureData20MHz</STRONG> (Thumb, 788 bytes, Stack size 32 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_BitTimeConfigureData20MHz))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DRV_CANFDSPI_BitTimeConfigureData20MHz &rArr; DRV_CANFDSPI_WriteWord &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_WriteWord
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_BitTimeConfigure
</UL>

<P><STRONG><a name="[77]"></a>DRV_CANFDSPI_BitTimeConfigureData40MHz</STRONG> (Thumb, 1120 bytes, Stack size 32 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_BitTimeConfigureData40MHz))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DRV_CANFDSPI_BitTimeConfigureData40MHz &rArr; DRV_CANFDSPI_WriteWord &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_WriteWord
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_BitTimeConfigure
</UL>

<P><STRONG><a name="[7a]"></a>DRV_CANFDSPI_BitTimeConfigureNominal10MHz</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_BitTimeConfigureNominal10MHz))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DRV_CANFDSPI_BitTimeConfigureNominal10MHz &rArr; DRV_CANFDSPI_WriteWord &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_WriteWord
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_BitTimeConfigure
</UL>

<P><STRONG><a name="[78]"></a>DRV_CANFDSPI_BitTimeConfigureNominal20MHz</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_BitTimeConfigureNominal20MHz))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DRV_CANFDSPI_BitTimeConfigureNominal20MHz &rArr; DRV_CANFDSPI_WriteWord &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_WriteWord
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_BitTimeConfigure
</UL>

<P><STRONG><a name="[76]"></a>DRV_CANFDSPI_BitTimeConfigureNominal40MHz</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_BitTimeConfigureNominal40MHz))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DRV_CANFDSPI_BitTimeConfigureNominal40MHz &rArr; DRV_CANFDSPI_WriteWord &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_WriteWord
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_BitTimeConfigure
</UL>

<P><STRONG><a name="[51]"></a>DRV_CANFDSPI_Configure</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DRV_CANFDSPI_Configure &rArr; DRV_CANFDSPI_WriteWord &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_WriteWord
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_CANFDSPI_Init
</UL>

<P><STRONG><a name="[50]"></a>DRV_CANFDSPI_ConfigureObjectReset</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_ConfigureObjectReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DRV_CANFDSPI_ConfigureObjectReset
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_CANFDSPI_Init
</UL>

<P><STRONG><a name="[68]"></a>DRV_CANFDSPI_DlcToDataBytes</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_DlcToDataBytes))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_TransmitChannelLoad
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TransmitMessageQueue
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_PayLoad_Tasks
</UL>

<P><STRONG><a name="[4e]"></a>DRV_CANFDSPI_EccEnable</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_EccEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DRV_CANFDSPI_EccEnable &rArr; DRV_CANFDSPI_WriteByte &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_WriteByte
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_CANFDSPI_Init
</UL>

<P><STRONG><a name="[74]"></a>DRV_CANFDSPI_ErrorCountStateGet</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_ErrorCountStateGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DRV_CANFDSPI_ErrorCountStateGet &rArr; DRV_CANFDSPI_ReadWord &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_ReadWord
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TransmitMessageQueue
</UL>

<P><STRONG><a name="[57]"></a>DRV_CANFDSPI_FilterMaskConfigure</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_FilterMaskConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DRV_CANFDSPI_FilterMaskConfigure &rArr; DRV_CANFDSPI_WriteWord &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_WriteWord
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_CANFDSPI_Init
</UL>

<P><STRONG><a name="[56]"></a>DRV_CANFDSPI_FilterObjectConfigure</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_FilterObjectConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DRV_CANFDSPI_FilterObjectConfigure &rArr; DRV_CANFDSPI_WriteWord &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_WriteWord
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_CANFDSPI_Init
</UL>

<P><STRONG><a name="[58]"></a>DRV_CANFDSPI_FilterToFifoLink</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_FilterToFifoLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DRV_CANFDSPI_FilterToFifoLink &rArr; DRV_CANFDSPI_WriteByte &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_CANFDSPI_Init
</UL>

<P><STRONG><a name="[5a]"></a>DRV_CANFDSPI_GpioModeConfigure</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_GpioModeConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DRV_CANFDSPI_GpioModeConfigure &rArr; DRV_CANFDSPI_WriteByte &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_WriteByte
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_CANFDSPI_Init
</UL>

<P><STRONG><a name="[5c]"></a>DRV_CANFDSPI_ModuleEventEnable</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_ModuleEventEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DRV_CANFDSPI_ModuleEventEnable &rArr; DRV_CANFDSPI_WriteHalfWord &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_WriteHalfWord
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_ReadHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_CANFDSPI_Init
</UL>

<P><STRONG><a name="[5d]"></a>DRV_CANFDSPI_OperationModeSelect</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_OperationModeSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DRV_CANFDSPI_OperationModeSelect &rArr; DRV_CANFDSPI_WriteByte &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_WriteByte
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_CANFDSPI_Init
</UL>

<P><STRONG><a name="[4f]"></a>DRV_CANFDSPI_RamInit</STRONG> (Thumb, 76 bytes, Stack size 120 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_RamInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DRV_CANFDSPI_RamInit &rArr; DRV_CANFDSPI_WriteByteArray &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_WriteByteArray
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_CANFDSPI_Init
</UL>

<P><STRONG><a name="[7d]"></a>DRV_CANFDSPI_ReadByte</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DRV_CANFDSPI_ReadByte &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_SPI_TransferData
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_TransmitChannelEventGet
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_ReceiveChannelEventEnable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_OperationModeSelect
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_GpioModeConfigure
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_EccEnable
</UL>

<P><STRONG><a name="[72]"></a>DRV_CANFDSPI_ReadByteArray</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_ReadByteArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DRV_CANFDSPI_ReadByteArray &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_SPI_TransferData
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_ReceiveMessageGet
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TestRamAccess
</UL>

<P><STRONG><a name="[80]"></a>DRV_CANFDSPI_ReadHalfWord</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_ReadHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DRV_CANFDSPI_ReadHalfWord &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_SPI_TransferData
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_ModuleEventEnable
</UL>

<P><STRONG><a name="[7f]"></a>DRV_CANFDSPI_ReadWord</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_ReadWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DRV_CANFDSPI_ReadWord &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_SPI_TransferData
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_ErrorCountStateGet
</UL>

<P><STRONG><a name="[83]"></a>DRV_CANFDSPI_ReadWordArray</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_ReadWordArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DRV_CANFDSPI_ReadWordArray &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_SPI_TransferData
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_TransmitChannelLoad
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_ReceiveMessageGet
</UL>

<P><STRONG><a name="[55]"></a>DRV_CANFDSPI_ReceiveChannelConfigure</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_ReceiveChannelConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DRV_CANFDSPI_ReceiveChannelConfigure &rArr; DRV_CANFDSPI_WriteWord &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_WriteWord
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_CANFDSPI_Init
</UL>

<P><STRONG><a name="[54]"></a>DRV_CANFDSPI_ReceiveChannelConfigureObjectReset</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_ReceiveChannelConfigureObjectReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DRV_CANFDSPI_ReceiveChannelConfigureObjectReset
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_CANFDSPI_Init
</UL>

<P><STRONG><a name="[5b]"></a>DRV_CANFDSPI_ReceiveChannelEventEnable</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_ReceiveChannelEventEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DRV_CANFDSPI_ReceiveChannelEventEnable &rArr; DRV_CANFDSPI_WriteByte &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_WriteByte
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_CANFDSPI_Init
</UL>

<P><STRONG><a name="[84]"></a>DRV_CANFDSPI_ReceiveChannelUpdate</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_ReceiveChannelUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DRV_CANFDSPI_ReceiveChannelUpdate &rArr; DRV_CANFDSPI_WriteByte &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_ReceiveMessageGet
</UL>

<P><STRONG><a name="[6d]"></a>DRV_CANFDSPI_ReceiveMessageGet</STRONG> (Thumb, 364 bytes, Stack size 160 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_ReceiveMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = DRV_CANFDSPI_ReceiveMessageGet &rArr; DRV_CANFDSPI_ReadWordArray &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_ReadByteArray
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_ReceiveChannelUpdate
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_ReadWordArray
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ReceiveMessage_Tasks
</UL>

<P><STRONG><a name="[4d]"></a>DRV_CANFDSPI_Reset</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DRV_CANFDSPI_Reset &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_SPI_TransferData
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_CANFDSPI_Init
</UL>

<P><STRONG><a name="[53]"></a>DRV_CANFDSPI_TransmitChannelConfigure</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_TransmitChannelConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DRV_CANFDSPI_TransmitChannelConfigure &rArr; DRV_CANFDSPI_WriteWord &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_WriteWord
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_CANFDSPI_Init
</UL>

<P><STRONG><a name="[52]"></a>DRV_CANFDSPI_TransmitChannelConfigureObjectReset</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_TransmitChannelConfigureObjectReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DRV_CANFDSPI_TransmitChannelConfigureObjectReset
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_CANFDSPI_Init
</UL>

<P><STRONG><a name="[73]"></a>DRV_CANFDSPI_TransmitChannelEventGet</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_TransmitChannelEventGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DRV_CANFDSPI_TransmitChannelEventGet &rArr; DRV_CANFDSPI_ReadByte &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TransmitMessageQueue
</UL>

<P><STRONG><a name="[75]"></a>DRV_CANFDSPI_TransmitChannelLoad</STRONG> (Thumb, 294 bytes, Stack size 160 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_TransmitChannelLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = DRV_CANFDSPI_TransmitChannelLoad &rArr; DRV_CANFDSPI_TransmitChannelUpdate &rArr; DRV_CANFDSPI_WriteByte &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_WriteByteArray
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_DlcToDataBytes
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_TransmitChannelUpdate
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_ReadWordArray
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TransmitMessageQueue
</UL>

<P><STRONG><a name="[85]"></a>DRV_CANFDSPI_TransmitChannelUpdate</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_TransmitChannelUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DRV_CANFDSPI_TransmitChannelUpdate &rArr; DRV_CANFDSPI_WriteByte &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_TransmitChannelLoad
</UL>

<P><STRONG><a name="[7e]"></a>DRV_CANFDSPI_WriteByte</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DRV_CANFDSPI_WriteByte &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_SPI_TransferData
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_ReceiveChannelEventEnable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_OperationModeSelect
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_GpioModeConfigure
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_FilterToFifoLink
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_EccEnable
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_TransmitChannelUpdate
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_ReceiveChannelUpdate
</UL>

<P><STRONG><a name="[71]"></a>DRV_CANFDSPI_WriteByteArray</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_WriteByteArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DRV_CANFDSPI_WriteByteArray &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_SPI_TransferData
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_TransmitChannelLoad
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_RamInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TestRamAccess
</UL>

<P><STRONG><a name="[81]"></a>DRV_CANFDSPI_WriteHalfWord</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_WriteHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DRV_CANFDSPI_WriteHalfWord &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_SPI_TransferData
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_ModuleEventEnable
</UL>

<P><STRONG><a name="[7c]"></a>DRV_CANFDSPI_WriteWord</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, drv_canfdspi_api.o(i.DRV_CANFDSPI_WriteWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DRV_CANFDSPI_WriteWord &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_SPI_TransferData
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_TransmitChannelConfigure
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_ReceiveChannelConfigure
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_FilterObjectConfigure
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_FilterMaskConfigure
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_Configure
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_BitTimeConfigureNominal40MHz
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_BitTimeConfigureNominal20MHz
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_BitTimeConfigureNominal10MHz
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_BitTimeConfigureData40MHz
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_BitTimeConfigureData20MHz
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_BitTimeConfigureData10MHz
</UL>

<P><STRONG><a name="[5f]"></a>DRV_SPI_Initialize</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv_spi.o(i.DRV_SPI_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DRV_SPI_Initialize &rArr; spi_master_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Initialize
</UL>

<P><STRONG><a name="[82]"></a>DRV_SPI_TransferData</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, drv_spi.o(i.DRV_SPI_TransferData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_WriteByteArray
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_Reset
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_ReadByteArray
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_WriteWord
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_WriteHalfWord
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_WriteByte
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_ReadWordArray
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_ReadWord
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_ReadHalfWord
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_CANFDSPI_ReadByte
</UL>

<P><STRONG><a name="[61]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Initialize
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_init
</UL>

<P><STRONG><a name="[6c]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TransmitSwitchState
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ReceiveMessage_Tasks
</UL>

<P><STRONG><a name="[65]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LED_Set
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_transfer
</UL>

<P><STRONG><a name="[63]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LED_Clear
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_transfer
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_init
</UL>

<P><STRONG><a name="[8a]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_init
</UL>

<P><STRONG><a name="[60]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Initialize
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_init
</UL>

<P><STRONG><a name="[8c]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_init
</UL>

<P><STRONG><a name="[8d]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_transfer
</UL>

<P><STRONG><a name="[8f]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_transfer
</UL>

<P><STRONG><a name="[8e]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_transfer
</UL>

<P><STRONG><a name="[8b]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_init
</UL>

<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[98]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[99]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[9a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = main &rArr; APP_Tasks &rArr; APP_TransmitSwitchState &rArr; APP_TransmitMessageQueue &rArr; DRV_CANFDSPI_TransmitChannelLoad &rArr; DRV_CANFDSPI_TransmitChannelUpdate &rArr; DRV_CANFDSPI_WriteByte &rArr; DRV_SPI_TransferData &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Tasks
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[86]"></a>spi_master_init</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, drv_spi.o(i.spi_master_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = spi_master_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_SPI_Initialize
</UL>

<P><STRONG><a name="[87]"></a>spi_master_transfer</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, drv_spi.o(i.spi_master_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_SPI_TransferData
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[88]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[89]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
